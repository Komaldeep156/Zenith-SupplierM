@model IEnumerable<Zenith.BLL.DTO.GetDropdownListDTO>

@{
    ViewData["Title"] = "Dropdown list";
}

<style>
    .title {
        color: #00387f;
        font-weight: 600;
        text-align: center;
        margin-bottom: 40px;
    }

        .title span {
            color: #C72C1C;
        }

    /* Apply grid layout to the container */
    .dropdown-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr); /* Create 3 equal-width columns */
        gap: 10px; /* Space between the columns */
    }

    /* Style for each input field */
    .dropdown-record input {
        width: 100%; /* Make inputs fill their column */
        box-sizing: border-box; /* Ensure padding/borders are included in width */
    }

    /* Optional: Styling for the input fields */
    .dropdown-record {
        display: contents; /* Each input becomes a direct child of the grid container */
    }
}
</style>

<div class="container-fluid">
    <input type="hidden" id="hdnCrntDDName" />
    <input type="hidden" id="hiddenDropDownListId" />
    <div class="row">
        <!-- sidebar -->
        <div class="col-md-3 col-lg-2 px-0 shadow-sm sidebar">
            <partial name="_Sidebar" />
        </div>

        <div class="col-md-9 col-lg-10 mt-3">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h1 class="py-2 mb-0 title">Dropdown <span> List</span></h1>
                    <button class="btn btn-light" data-bs-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample"><i class="fas fa-plus"></i> Add New List</button>
                </div>
                <div class="collapse mb-4" id="collapseExample">
                    <div class="card card-body p-4">
                        <form id="addLlistForm">
                            <div class="d-flex mb-3">
                                <div class="col-9 me-2">
                                    <label for="name" class="form-label fw-bold">Name <span class="text-danger">*</span></label>
                                        <input type="text" class="form-control" id="name" placeholder="Type name..">
                                        <div id="emailHelp" class="form-text">The name corresponds to the dropdown selection.</div>
                                </div>
                                <div class="col-3 ms-2">
                                        <label for="name" class="form-label fw-bold">Code</label>
                                        <input type="text" class="form-control" id="code" placeholder="Type code..">
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="name" class="form-label fw-bold">Description</label>
                                <input type="text" class="form-control" id="description" placeholder="Description here...">
                            </div>
                            <div class="text-end">
                                <button type="button" class="btn btn-primary" onclick="addList()">Add List</button>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="row">
                    <table class="table table-striped table-bordered">
                        <thead class="bg-primary text-white text-center text-nowrap">
                            <tr>
                                <th><b>SNo.</b></th>
                                <th><b>Name</b></th>
                                <th><b>Code</b></th>
                                <th><b>Description</b></th>
                                <th><b>Dropdown Values</b></th>
                                <th><b>Action</b></th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int index = 1;
                                @foreach (var lst in Model)
                                {
                                    <tr>
                                        <td class="text-center"><b>@index</b></td>
                                        <td class="text-center">@lst.Name</td>
                                        <td class="text-center">@lst.Code</td>
                                        <td class="text-center">@lst.Description</td>
                                        <td class="text-center px-3">
                                            <select class="form-select" aria-label="Default select example">
                                                @foreach (var val in lst.Values)
                                                {
                                                    <option>@val.Value</option>
                                                }
                                            </select>
                                        </td>
                                        <td class="text-center">
                                            <a title="Edit" class="btn btn-primary" onclick="getValueModal('@lst.Name', '@lst.Id')" data-bs-toggle="modal" data-bs-target="#exampleModal">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                        </td>
                                    </tr>
                                    index++;
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Add Dropdown values</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="ValuesForm">
                    <div class="form-group">
                        <label id="dropdownLabel"></label>
                        <table id="dropdownTable" class="table table-bordered">
                            <thead>
                                <tr id="dropdownHeaders">
                                    <!-- Headers will be inserted dynamically here -->
                                </tr>
                            </thead>
                            <tbody id="dropdownContainer">
                                <!-- New rows will be added here -->
                            </tbody>
                        </table>
                        <button type="button" class="btn btn-outline-dark mt-2" id="addButton">+ New value</button>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


<script src="~/lib/jquery/dist/jquery.min.js"></script>

<script>

    function getValueModal(name, id) {
        $('#dropdownLabel').empty();
        $('#hiddenDropDownListId').val("");
        $('#hiddenDropDownListId').val(id);
        $('#dropdownLabel').append('Dropdown name: ' + name);
        $('#hdnCrntDDName').val(name);

        const hdnCrntDDName = $('#hdnCrntDDName').val();  // Assuming you have a hidden field to get the dropdown name

        // Dynamically set column headers
        const headers = [hdnCrntDDName + ' Value', hdnCrntDDName+' Code', hdnCrntDDName+' Description', 'Actions'];  // Customize this based on your dynamic data
        const headerRow = document.getElementById('dropdownHeaders');

        // Clear any existing headers
        headerRow.innerHTML = '';

        // Create and append header cells
        headers.forEach(header => {
            const th = document.createElement('th');
            th.textContent =  header;  // Prefix with dynamic dropdown name
            headerRow.appendChild(th);
        });
    }

    document.getElementById('addButton').addEventListener('click', function () {
        const container = document.getElementById('dropdownContainer');
        const hdnCrntDDName = $('#hdnCrntDDName').val();

        // Create a new row for the table
        const row = document.createElement('tr');

        // Input for 'value'
        const valueInput = document.createElement('input');
        valueInput.className = 'form-control';
        valueInput.name = 'value';
        valueInput.placeholder = hdnCrntDDName + ' Value';
        const valueTd = document.createElement('td');
        valueTd.appendChild(valueInput);
        row.appendChild(valueTd);

        // Input for 'code'
        const codeInput = document.createElement('input');
        codeInput.className = 'form-control';
        codeInput.name = 'code';
        codeInput.placeholder = hdnCrntDDName + ' Code';
        const codeTd = document.createElement('td');
        codeTd.appendChild(codeInput);
        row.appendChild(codeTd);

        // Input for 'description'
        const descInput = document.createElement('input');
        descInput.className = 'form-control';
        descInput.name = 'description';
        descInput.placeholder = hdnCrntDDName + ' Description';
        const descTd = document.createElement('td');
        descTd.appendChild(descInput);
        row.appendChild(descTd);

        // Delete button
        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'btn btn-danger btn-sm';
        deleteBtn.textContent = 'Delete';
        deleteBtn.onclick = function () {
            row.remove(); // Remove the row when the delete button is clicked
        };
        const actionTd = document.createElement('td');
        actionTd.appendChild(deleteBtn);
        row.appendChild(actionTd);

        // Append the new row to the table body
        container.appendChild(row);
    });

    document.getElementById('ValuesForm').addEventListener('submit', function (event) {
        event.preventDefault();

        const records = [];
        const rows = document.querySelectorAll('#dropdownContainer tr'); // Select rows from the table

        rows.forEach(row => {
            const value = row.querySelector('input[name="value"]').value;
            const code = row.querySelector('input[name="code"]').value;
            const description = row.querySelector('input[name="description"]').value;

            if (value || code || description) { // Ensure all fields are filled out
                records.push({ value, code, description });
            }
        });

        let DropdownParentNameId = document.getElementById('hiddenDropDownListId').value;
        let mainDescription = document.getElementById('valDescription') ? document.getElementById('valDescription').value : '';

        $.ajax({
            url: '/DropdownList/AddValue',
            type: 'POST',
            data: JSON.stringify({
                dropdownParentNameId: DropdownParentNameId,
                records: records,
                mainDescription: mainDescription // Add the description if needed
            }),
            contentType: 'application/json',
            success: function (resp) {
                window.location.reload(); // Reload the page after successful submission
            },
            error: function (xhr, status, error) {
                console.error('Error submitting data: ', error);
                alert('Failed to submit data. Please try again.');
            }
        });
    });



    function addList(Id) {
        let name = $('#addLlistForm #name').val();
        let code = $('#addLlistForm #code').val();
        let description = $('#addLlistForm #description').val();

        $.ajax({
            url: '/DropdownList/addNewList',
            type: 'POST',
            data: {
                name: name,
                code : code,
                description: description,
            },
            success: function (resp) {
                window.location.reload();
            }
        });
    }
</script>

