@model IEnumerable<Zenith.BLL.DTO.GetVendorsListDTO>

@{
    ViewData["Title"] = "Workbench";
}

<style>
    .title {
        color: #00387f;
        font-weight: 600;
        text-align: center;
        margin-bottom: 40px;
    }

        .title span {
            color: #C72C1C;
        }

        .disabled-row {
        background-color: #f2f2f2; /* Light gray to indicate it's disabled */
        color: #ccc; /* Gray out the text */
        pointer-events: none; /* Prevent clicks, hover, etc., on the entire row */
  }

</style>


<div class="container-fluid">
    <div class="row">
        <!-- sidebar -->
        <div class="col-md-3 col-lg-2 px-0 shadow-sm sidebar">
            <partial name="_Sidebar" />
        </div>

        <div class="col-md-9 col-lg-10 ml-md-auto mt-3">
            <div class="container-fluid">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="py-2 mb-0 title"><span> Officer Workbench</span></h1>
                </div>

                <div class="row mt-4">
                    <div id="divWorkBenchSummaryPartialView" class="col-md-6">

                    </div>
                    <div class="col-md-6">
                        <div style="width: 50%; margin: auto; padding-top: 20px;">
                            <canvas id="approvalChart"></canvas>
                        </div>
                    </div>
                </div>

                <ul class="nav nav-tabs mt-4" id="myTab" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#home" type="button" role="tab" aria-controls="home" aria-selected="true">Requests</button>
                    </li>
                </ul>

                <div class="tab-content mt-4" id="myTabContent">
                    <!-- First !-->
                    <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
                        <div class="container">
                            <!-- Search Section -->
                            <div class="row mb-3">
                                <div class="col d-flex align-items-center">
                                    <select class="form-select me-2" style="width: 170px;" id="fieldNameId">
                                        <option selected>Select</option>
                                        <option value="supplierName">Supplier Name</option>
                                        <option value="requestNo">Vendor Req No.</option>
                                        <option value="supplierCountry">Supplier Country</option>
                                    </select>

                                    <input type="search" class="form-control me-2" id="searchInputId" placeholder="Search here" style="width: 200px;" />

                                    <input type="button" class="btn btn-primary" onclick="searchVendor()" value="Search" />
                                </div>
                            </div>

                            <!-- Delegate Section -->
                            <div class="row">
                                <div class=" d-flex align-items-center">
                                    <span class="me-2"><b>Delegate/Re-Assign:</b></span>
                                    <select id="ddlActionOptions" onchange="ddlActionOptionsChangeEvent(this)" class="form-select me-2" style="width: 200px;">
                                        <option value="DLU" selected>Delegate To User</option>
                                        <option value="RAU">Re-Assign To User</option>
                                    </select>

                                    <select id="ddlDelgateToUserVendorReq" class="form-select me-2" style="width: 200px;">
                                        @if (ViewBag.DelegateUserListDDL != null)
                                        {
                                            <option value="" selected>Select</option>
                                            foreach (var usr in ViewBag.DelegateUserListDDL)
                                            {
                                                <option value="@usr.Id">@usr.FullName</option>
                                            }
                                        }
                                    </select>

                                    <input type="button" class="btn btn-secondary me-2" id="btnDelegate" onclick="btnClickDeligateUserDDLEvent('Vendor')" value="Delegate" />

                                    <select id="ddlRe_AssignReasonDDL" style="display:none;width: 22%;" class="divReassignTouserInptFields form-select reasonSelectContainer">
                                        @if (ViewBag.re_AssignReasonDDL != null)
                                            {
                                                <option value="" selected>Select</option>
                                            foreach (var reason in ViewBag.re_AssignReasonDDL.Values)
                                                {
                                                    <option value="@reason.Id">@reason.Value</option>
                                                }
                                            }
                                        </select>
                                    <textarea type="text" style="display:none;width: 20%;margin-left: 10px;" id="txtReassignComments" placeholder="Comment.." class="divReassignTouserInptFields form-control mt-2"></textarea>
                                </div>

                                <div class="col">
                                    <span id="VendorGridDelegateError" class="text-danger" style="display: none;">Please select delegate to user.</span>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-md-12">
                                <div id="divVendorApprovalListPartialView" class="overflow-auto">
                                    @Html.Partial("_OfficerWorkBenchRequestsList", Model)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    
    $(document).ready(function () {
        WorkBenchSummaryPartialView();
        setTimeout(function () {
            bindSummaryChart();
        }, 2000); // 2000 milliseconds = 2 seconds

    });

    function bindSummaryChart() {
        const statusTypes = ["Pending Status", "Working Status", "Delegate Requested"];
        const statusCounts = [0, 0, 0];

        // Iterate over each row in the table to get status data
        document.querySelectorAll(".workBenchSummaryTable tbody tr").forEach((row, index) => {
            const cells = row.querySelectorAll("td");
            if (cells.length > 4) {
                const pendingCount = parseInt(cells[1].textContent.trim(), 10);
                const workingCount = parseInt(cells[2].textContent.trim(), 10);
                const delegateCount = parseInt(cells[3].textContent.trim(), 10);

                // Add valid counts to the respective totals
                if (!isNaN(pendingCount)) statusCounts[0] += pendingCount;
                if (!isNaN(workingCount)) statusCounts[1] += workingCount;
                if (!isNaN(delegateCount)) statusCounts[2] += delegateCount;
            }
        });

        if (statusCounts.every(count => count === 0)) {
            console.error("No valid data found for the chart.");
            return;
        }

        // Initialize Chart.js pie chart
        const ctx = document.getElementById('approvalChart').getContext('2d');
        new Chart(ctx, {
            type: 'pie',
            data: {
                labels: statusTypes,
                datasets: [{
                    label: 'Status Distribution',
                    data: statusCounts,
                    backgroundColor: [
                        '#4e73df', // Pending - Blue
                        '#1cc88a', // Working - Green
                        '#f6c23e'  // Delegate - Yellow
                    ],
                    borderColor: '#ffffff',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                const dataIndex = tooltipItem.dataIndex;
                                return `${statusTypes[dataIndex]}: ${statusCounts[dataIndex]}`;
                            }
                        }
                    }
                }
            }
        });
    }

  
    function searchVendor() {
        var fieldName = $("#fieldNameId").val();
        var searchText = $("#searchInputId").val();
        $.ajax({
            url: '/Workbench/_OfficerWorkBenchRequestsList',
            type: 'POST',
            data: { fieldName: fieldName, searchText: searchText },
            success: function (result) {
                $("#divVendorApprovalListPartialView").html(result);
            }
        });
    }

    function WorkBenchSummaryPartialView() {
        $.ajax({
            url: '/Workbench/_WorkBenchSummaryPartialView',
            type: 'GET',
            success: function (result) {
                $("#divWorkBenchSummaryPartialView").html(result);
            }
        });
    }


    function selectAllChkbxChangeEvent(thisEvent, childChkbxId) {
        $("." + childChkbxId).each(function () {
            $(this).prop('checked', $(thisEvent).is(":checked"));
        });
    } 
    
    function ddlActionOptionsChangeEvent(thisEvent) {
        var slctdActionCode=$(thisEvent).val();
        if (slctdActionCode == 'DLU') {
            $('#btnDelegate').val('Delegate');
            $('.divReassignTouserInptFields').hide();

        } else {
            $('.divReassignTouserInptFields').show();
            $('#btnDelegate').val('Re-Assign');

        }
    }

    function checkParentCheckbox(parentcheckbxId,childChkbxId) {
        const parentCheckbox = $("#" + parentcheckbxId);
        const allChecked = $("." + childChkbxId).length === $("." + childChkbxId + ":checked").length;
            parentCheckbox.prop('checked', allChecked);
    }

    function DelegateUserRequests() {
        let selectedGuids = [];

        // Loop through checked checkboxes with class 'actionCheckboxes'
        $(".actionUserReqCheckboxes:checked").each(function () {
            // Push the checkbox value (assumed to be a GUID string) to the array
            selectedGuids.push($(this).attr('UserId'));
        });
    }

    function btnClickDeligateUserDDLEvent(gridType) {
        let selectedReqGuids = [];
        let selectedDeleGateToUserId;
        let isValid = true;

            $(".actionVendorCheckboxes:checked").each(function () {
                // Push the checkbox value (assumed to be a GUID string) to the array
                selectedReqGuids.push($(this).attr('VendorId'));
            });
            selectedDeleGateToUserId = $('#ddlDelgateToUserVendorReq').val();
            const errorMessage = document.getElementById("VendorGridDelegateError");

            if (!selectedDeleGateToUserId) {
                errorMessage.style.display = "inline";
                isValid = false;
            }else{
                errorMessage.style.display = "none";
            }

        if (!isValid) {
            return false;
        }

        $.ajax({
            url: '/Workbench/CreateDelegateRequest',
            type: 'POST',
            data: {
                recordTypeCd : gridType === 'Vendor'? 'VIR' : 'VACATION',
                commaSprtdRecordIds : selectedReqGuids.join(','),
                delegateToUserId: selectedDeleGateToUserId,
            },
            success: function (resp) {
                if (gridType === 'Vendor') {
                    searchVendor();
                } else if (gridType === 'User') {
                    bindVacationRequestsApprovalList();
                }
            }
        });
    }

    function onWorkStatusChange(VendorsInitializationFormId) {
        const workStatusId = document.getElementById('workStatusDropdown').value;
        $.ajax({
            url: '/VQWorkFlow/UpdateVQWorkFlowExecutionStatus',
            type: 'POST',
            data: {
                VendorsInitializationFormId: VendorsInitializationFormId,
                StatusId: workStatusId,
            },
            success: function (resp) {
                if (msg != 'comment') {
                    window.location.reload();
                }
            }
        });
    }

</script>



