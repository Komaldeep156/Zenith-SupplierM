@model IEnumerable<Zenith.BLL.DTO.GetVendorsListDTO>

@{
    ViewData["Title"] = "Workbench";
}

<style>
    .title {
        color: #00387f;
        font-weight: 600;
        text-align: center;
        margin-bottom: 40px;
    }

        .title span {
            color: #C72C1C;
        }

        .disabled-row {
        background-color: #f2f2f2; /* Light gray to indicate it's disabled */
        color: #ccc; /* Gray out the text */
        pointer-events: none; /* Prevent clicks, hover, etc., on the entire row */
  }

</style>


<div class="container-fluid">
    <div class="row">
        <!-- sidebar -->
        <div class="col-md-3 col-lg-2 px-0 shadow-sm sidebar">
            <partial name="_Sidebar" />
        </div>

        <div class="col-md-9 col-lg-10 ml-md-auto mt-3">
            <div class="container-fluid">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="py-2 mb-0 title"><span> Manager Workbench</span></h1>
                    <div>
                        <a class="btn btn-light" asp-action="AddVendor" asp-controller="Vendors"><i class="fas fa-plus"></i> Add Vendor</a>
                        <a class="btn btn-light" asp-action="DownloadExcelFile" asp-controller="Vendors"><i class="fas fa-download"></i> Download Vendor Form</a>
                    </div>
                </div>

                <div class="row mt-4">
                    <div id="divWorkBenchSummaryPartialView" class="col-md-6">

                    </div>
                    <div class="col-md-6">
                        <div style="width: 50%; margin: auto; padding-top: 20px;">
                            <canvas id="approvalChart"></canvas>
                        </div>
                    </div>
                </div>

                <ul class="nav nav-tabs mt-4" id="myTab" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#home" type="button" role="tab" aria-controls="home" aria-selected="true">Vendor Approval requests</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile" type="button" role="tab" aria-controls="profile" aria-selected="false">User Approval requests</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="delegation-tab" data-bs-toggle="tab" data-bs-target="#delegation" type="button" role="tab" aria-controls="delegation" aria-selected="false">
                            Manage delegation requests
                        </button>
                    </li>
                </ul>

                <div class="tab-content mt-4" id="myTabContent">

                    <!-- First !-->

                    <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
                        <div class="d-flex align-items-center">
                            <!-- Filter Options and Search Button -->
                            <div class="d-flex align-items-center">
                                <select class="form-select me-2" style="width: 170px;" id="fieldNameId">
                                    <option selected>Select</option>
                                    <option value="supplierName">Supplier Name</option>
                                    <option value="requestNo">Vendor Req No.</option>
                                    <option value="supplierCountry">Supplier Country</option>
                                </select>

                                <input type="search" class="form-control me-2" id="searchInputId" placeholder="Search here" style="width: 200px;" />

                                <input type="button" class="btn btn-primary" onclick="searchVendor()" value="Search" />
                            </div>

                            <!-- Delegate User Dropdown -->
                            <div class="d-flex align-items-center ms-3">
                                <span class="me-2"><b>Delegate to user:</b></span>
                                <select id="ddlDelgateToUserVendorReq" class="form-select" style="width: 200px;">
                                    @if (ViewBag.DelegateUserListDDL != null)
                                    {
                                        <option value="" selected>Select</option>
                                        foreach (var usr in ViewBag.DelegateUserListDDL)
                                        {
                                            <option value="@usr.Id">@usr.FullName</option>
                                        }
                                    }
                                </select>
                                <input type="button" class="btn btn-secondary" onclick="btnClickDeligateUserDDLEvent('Vendor')" value="Delegate" />
                                <span id="VendorGridDelegateError" class=" text-danger ms-3" style="display: none;">Please select delegate to user.</span>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-md-12">
                                <div id="divVendorApprovalListPartialView" class="overflow-auto">
                                    @Html.Partial("_VendorApprovalListPartialView", Model)
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- second !-->
                    <div id="profile" class="tab-pane fade" role="tabpanel" aria-labelledby="profile-tab">
                        <div class="d-flex align-items-center">
                            <!-- Date Inputs and Search Button -->
                            <div class="d-flex align-items-center">
                                <input type="date" id="FilterFromDate" class="form-control me-2" placeholder="From Date">
                                <input type="date" id="FilterToDate" class="form-control me-2" placeholder="To Date">
                                <input type="button" class="btn btn-primary" onclick="SearchFilterVacationRequests()" value="Search" />
                            </div>

                            <!-- Delegate User Dropdown -->
                            <div class="d-flex align-items-center ms-3">
                                <span class="me-2"><b>Delegate to user:</b></span>
                                <select id="ddlDelgateToUserReq" class="form-select" style="width: 200px;">
                                    @if (ViewBag.DelegateUserListDDL != null)
                                    {
                                        <option value="" selected>Select</option>
                                        foreach (var usr in ViewBag.DelegateUserListDDL)
                                        {
                                            <option value="@usr.Id">@usr.FullName</option>
                                        }
                                    }
                                </select>
                                <input type="button" class="btn btn-secondary" onclick="btnClickDeligateUserDDLEvent('User')" value="Delegate" />
                                <span id="UserGridDelegateError" class="delegateError text-danger ms-3" style="display: none;">Please select delegate to user.</span>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-md-12">
                                
                                <div id="divVacationRequestsApprovalList" class="overflow-auto">
                                    
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Third !-->
                    <div id="delegation" class="tab-pane fade" role="tabpanel" aria-labelledby="delegation-tab">
                        <div class="row mt-3">
                            <div class="col-md-12">

                                <div id="divDelegationRequestsList" class="overflow-auto">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>

    
    $(document).ready(function () {
        WorkBenchSummaryPartialView();
        bindVacationRequestsApprovalList();
        bindDelegationRequestsList();
        setTimeout(function () {
            bindSummaryChart();
        }, 2000); // 2000 milliseconds = 2 seconds

    });

    function bindSummaryChart() {
        const approvalTypes = [];
        const totalCounts = [];

        // Iterate over each row in the table to get data
        document.querySelectorAll(".workBenchSummaryTable tbody tr").forEach((row, index) => {
            if (index < document.querySelectorAll(".workBenchSummaryTable tbody tr").length - 1) { // Exclude the total row
                const approvalType = row.cells[0].innerText;
                const totalCount = parseInt(row.cells[3].innerText);

                approvalTypes.push(approvalType);
                totalCounts.push(totalCount);
            }
        });

        // Initialize Chart.js pie chart
        const ctx = document.getElementById('approvalChart').getContext('2d');
        new Chart(ctx, {
            type: 'pie',
            data: {
                labels: approvalTypes,
                datasets: [{
                    label: 'Approval Type Counts',
                    data: totalCounts,
                    backgroundColor: [
                        '#4e73df',
                        '#1cc88a',
                        '#36b9cc',
                        '#f6c23e',
                        '#e74a3b'
                    ],
                    borderColor: '#ffffff',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                return approvalTypes[tooltipItem.dataIndex] + ': ' + totalCounts[tooltipItem.dataIndex];
                            }
                        }
                    }
                }
            }
        });
    }
  
    function showRejectContainer(id) {
        $('.divRejectReasonDDL_' + id).show();
    }
    
    function onChangeRejectReasonDDLEvent(vendorId) {
        var rejectionId = document.querySelector('.reasonSelectContainer_' + vendorId).value;
        if (rejectionId) {
            changeStatus(vendorId, 'false', rejectionId);
        } 
    }

    function changeStatus(VendorsInitializationFormId, msg, rejectionId) {
        var isApproved = false;
        var rejectReasonId = null;
        var comment = $('.comment_' + VendorsInitializationFormId).val().trim();
        if (msg == 'true') {
            isApproved = true;
        } 
        if(msg == 'false') {
            rejectReasonId = rejectionId;
        }

        $.ajax({
            url: '/Workbench/UpdateVendor',
            type: 'POST',
            data: {
                VendorsInitializationFormId: VendorsInitializationFormId,
                isApproved: isApproved,
                rejectionReasonId: rejectReasonId,
                comments: comment
            },
            success: function (resp) {
                if (msg != 'comment') {
                    window.location.reload();
                }
            }
        });
    }


    function onVCRqstsChangeRJRsnDDLEvent(VacationRequestsId) {
        var rejectionId = document.querySelector('.reasonSelectContainer_' + VacationRequestsId).value;
        if (rejectionId) {
            changeVacationRequestsStatus(VacationRequestsId, 'false', rejectionId);
        } 
    }

    function changeVacationRequestsStatus(VacationRequestsId, msg, rejectionId) {
        var isApproved = false;
        var rejectReasonId = null;
        var comment = $('.comment_' + VacationRequestsId).val().trim();
        if (msg == 'true') {
            isApproved = true;
        }
        if (msg == 'false') {
            rejectReasonId = rejectionId;
        }

        $.ajax({
            url: '/Workbench/UpdateVacationRequests',
            type: 'POST',
            data: {
                Id: VacationRequestsId,
                isApproved: isApproved,
                rejectionReasonId: rejectReasonId,
                comments: comment
            },
            success: function (resp) {
                bindVacationRequestsApprovalList();
            }
        });
    }


    function onChangeNonCriticalEvent(vendorId, thisEvent)
    {
        $.ajax({
            url: '/Workbench/UpdateVendorCriticalNonCritical',
            type: 'POST',
            data: {
                vendorId: vendorId,
                isVendorCritical: $(thisEvent).val()=='Y'
            },
            success: function (resp) {
                
            }
        });
    }

    $('#uploadButton').click(function () {
        var fileInput = $('#fileInput')[0].files[0];

        if (!fileInput) {
            alert("Please select a file first.");
            return;
        }

        var formData = new FormData();
        formData.append("file", fileInput);

        $.ajax({
            url: "/Vendors/NewVendorUploadExcel",
            type: "POST",
            data: formData,
            processData: false,
            contentType: false,
            success: function (response) {
                // Display a popup message with success and failure counts
                let message = `${response.successCount} Vendors uploaded successfully.`;
                if (response.failureCount > 0) {
                    message += ` ${response.failureCount} failed. Please see the downloaded file for details.`;
                    // Trigger download if there were failures
                    var link = document.createElement('a');
                    link.href = response.fileUrl;
                    link.download = "InvalidRecords.xlsx";
                    link.click();
                }
                alert(message); // Or use a custom popup method
            },
            error: function (xhr, status, error) {
                console.error("Error uploading file:", error);
            }
        });
    });

    function searchVendor() {
        var fieldName = $("#fieldNameId").val();
        var searchText = $("#searchInputId").val();
        $.ajax({
            url: '/Workbench/_VendorApprovalListPartialView',
            type: 'POST',
            data: { fieldName: fieldName, searchText: searchText },
            success: function (result) {
                $("#divVendorApprovalListPartialView").html(result);
            }
        });
    }

    function SearchFilterVacationRequests() {
        let startDate = $("#FilterFromDate").val();
        let endDate = $("#FilterToDate").val();
        $.ajax({
            url: '/Workbench/_VacationRequestsApprovalListPartialView',
            type: 'GET',
            data: { filterStartDate: startDate, filterEndDate: endDate },
            success: function (result) {
                $("#divVacationRequestsApprovalList").html(result);
            }
        });
    }

    
    function bindVacationRequestsApprovalList() {
        $.ajax({
            url: '/Workbench/_VacationRequestsApprovalListPartialView',
            type: 'GET',
            data: { filterStartDate: null, filterEndDate: null },
            success: function (result) {
                $("#divVacationRequestsApprovalList").html(result);
            }
        });
    }
    
    function bindDelegationRequestsList() {
        $.ajax({
            url: '/Workbench/_ManageDelegationRequestsList',
            type: 'GET',
            data: { filterStartDate: null, filterEndDate: null },
            success: function (result) {
                $("#divDelegationRequestsList").html(result);
            }
        });
    }





    function deleteSelectedVendors() {

        let selectedGuids = [];

        // Loop through checked checkboxes with class 'actionCheckboxes'
        $(".actionCheckboxes:checked").each(function () {
            // Push the checkbox value (assumed to be a GUID string) to the array
            selectedGuids.push($(this).attr('VendorId'));
        });
        
        $.ajax({
            type: "POST",
            url: "/Workbench/deleteVendors", // Change to your actual controller/action method
            data:  JSON.stringify(selectedGuids),     // Convert array to JSON format
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                window.location.reload();
            },
            error: function (xhr, status, error) {
                alert("Error:", error);
            }
        });
    }

    function WorkBenchSummaryPartialView() {
        $.ajax({
            url: '/Workbench/_WorkBenchSummaryPartialView',
            type: 'GET',
            success: function (result) {
                $("#divWorkBenchSummaryPartialView").html(result);
            }
        });
    }


    function selectAllChkbxChangeEvent(thisEvent, childChkbxId) {
        $("." + childChkbxId).each(function () {
            $(this).prop('checked', $(thisEvent).is(":checked"));
        });
    }

    function checkParentCheckbox(parentcheckbxId,childChkbxId) {
        const parentCheckbox = $("#" + parentcheckbxId);
        const allChecked = $("." + childChkbxId).length === $("." + childChkbxId + ":checked").length;
            parentCheckbox.prop('checked', allChecked);
    }

    function DelegateUserRequests() {
        let selectedGuids = [];

        // Loop through checked checkboxes with class 'actionCheckboxes'
        $(".actionUserReqCheckboxes:checked").each(function () {
            // Push the checkbox value (assumed to be a GUID string) to the array
            selectedGuids.push($(this).attr('UserId'));
        });
    }

    function btnClickDeligateUserDDLEvent(gridType) {
        let selectedReqGuids = [];
        let selectedDeleGateToUserId;
        let isValid = true;

        if (gridType === 'Vendor') {
            $(".actionVendorCheckboxes:checked").each(function () {
                // Push the checkbox value (assumed to be a GUID string) to the array
                selectedReqGuids.push($(this).attr('VendorId'));
            });
            selectedDeleGateToUserId = $('#ddlDelgateToUserVendorReq').val();
            const errorMessage = document.getElementById("VendorGridDelegateError");

            if (!selectedDeleGateToUserId) {
                errorMessage.style.display = "inline";
                isValid = false;
            }else{
                errorMessage.style.display = "none";
            }
        } else if (gridType === 'User') {
            $(".actionUserReqCheckboxes:checked").each(function () {
                // Push the checkbox value (assumed to be a GUID string) to the array
                selectedReqGuids.push($(this).attr('VacationId'));
            });
            selectedDeleGateToUserId = $('#ddlDelgateToUserReq').val();
            const errorMessage = document.getElementById("UserGridDelegateError");
            if (!selectedDeleGateToUserId) {
                errorMessage.style.display = "inline";
                isValid = false;
            } else {
                errorMessage.style.display = "none";
            }
        }

        if (!isValid) {
            return false;
        }

        $.ajax({
            url: '/Workbench/CreateDelegateRequest',
            type: 'POST',
            data: {
                recordTypeCd : gridType === 'Vendor'? 'VIR' : 'VACATION',
                commaSprtdRecordIds : selectedReqGuids.join(','),
                delegateToUserId: selectedDeleGateToUserId,
            },
            success: function (resp) {
                if (gridType === 'Vendor') {
                    searchVendor();
                } else if (gridType === 'User') {
                    bindVacationRequestsApprovalList();
                }
            }
        });
    }
    
    
    function actionClickDelegationRequest(rcrdId,isDelegationReqAccepted) {
        $.ajax({
            url: '/Workbench/AcceptOrRejectDelegateRequest',
            type: 'POST',
            data: {
                delegateRequestId: rcrdId,
                isDelegationReqAccepted: isDelegationReqAccepted,
            },
            success: function (resp) {
                bindDelegationRequestsList();
            }
        });
    }

</script>



